.macro BUFSIZ 512 .endm

.macro MAX_FILES 20 .endm
.macro _FILE.fd 0 + .endm
.macro _FILE.buf _sizeof(word) + .endm
.macro _FILE.count _FILE.buf BUFSIZ + .endm
.macro _FILE.mode _FILE.count _sizeof(word) + .endm
.macro _sizeof(FILE) _FILE.mode _sizeof(word) + .endm

.var stdin i8 1024
.var stdout i8 1024
.var stderr i8 1024

.macro _io_init
  STDIN_FILENO stdin _FILE.fd  !word
  STDOUT_FILENO stdout _FILE.fd  !word
  STDERR_FILENO stderr _FILE.fd  !word
.endm

\ FILE --
.macro fflush
  dup dup _FILE.count @word
  over _FILE.buf
  rot _FILE.fd @word
  write
  drop 
  0 swap _FILE.count !word
.endm
  
\ FILE c --
.macro fputc
  swap dup _FILE.count @word BUFSIZ = if
    dup fflush
  endif
  dup _FILE.buf over _FILE.count @word + rot swap !8
  _FILE.count _incword
.endm

\ FILE buf fputs
.func fputs
  { buf file }
  begin
  buf @8
  { *buf }
  *buf 0 <>
  while
    file *buf fputc
    buf 1+
    [ buf ]
  repeat
  0
.endf

.macro _io_exit
  stdout fflush
  stderr fflush
.endm

.macro puts stdout swap fputs .endm
.macro eputs stderr swap fputs .endm

\ Unbuffered output - use for now because
\ buffered IO library is not that great.
.macro uputs STDOUT_FILENO write .endm
.macro ueputs STDERR_FILENO write .endm